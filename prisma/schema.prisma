datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["strictUndefinedChecks", "relationJoins"]
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?   @unique
  accounts      Account[]
  sessions      Session[]

  // 1-1 -> User can have one Stripe customer
  stripeCustomer StripeCustomer?

  PasswordResetToken PasswordResetToken[]
  preferences        UserPreferences?
}

model Account {
  id                String    @id @default(cuid())
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // This ensures that the same provider + account ID combo can't be reused. Useful for OAuth.
  @@unique([provider, providerAccountId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  prefix    String   @db.VarChar(8)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([prefix])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id       String   @id @default(cuid())
  email    String
  token    String   @unique
  expires  DateTime
  lastSent DateTime @default(now())

  // Email and token are unique together
  @@unique([email, token])
}

enum ContactTimePreference {
  MORNING
  AFTERNOON
  EVENING
}

model UserPreferences {
  id                    String                 @id @default(cuid())
  userId                String                 @unique
  emailNotifications    Boolean                @default(true)
  smsNotifications      Boolean                @default(false)
  pushNotifications     Boolean                @default(false)
  contactTimePreference ContactTimePreference?
  darkMode              Boolean                @default(false)
  language              String                 @default("en") // default language
  newsletterSubscribed  Boolean                @default(true) // subscription to newsletters

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

model Subscription {
  id                    String             @id @default(cuid())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  plan                  SubscriptionPlan   @default(FREE)
  status                SubscriptionStatus @default(ACTIVE)
  stripeCustomerId      String? // Stripe customer ID
  stripeSubscriptionId  String? // Stripe subscription ID
  stripePaymentMethodId String? // Default payment method
  currentPeriodStart    DateTime? // Start of current billing period
  currentPeriodEnd      DateTime? // End of current billing period
  cancelAtPeriodEnd     Boolean            @default(false)
  transcriptionsUsed    Int                @default(0)
  transcriptionsLimit   Int                @default(2) // Default for FREE tier
  trialEndsAt           DateTime? // When the trial period ends (if applicable)
  priceId               String? // Current price ID from Stripe
  seatsPurchased        Int                @default(1) // Paid-for seats
  billingInterval       String?            @default("MONTHLY") // "MONTHLY" or "YEARLY"

  // Payment history
  invoices SubscriptionInvoice[]

  // Frequently fetching subscriptions based on stripe customer id
  @@index([stripeCustomerId])
  // Frequently fetching subscriptions based on stripe subscription id
  @@index([stripeSubscriptionId])
}

model SubscriptionInvoice {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  stripeInvoiceId String    @unique
  amount          Int // Amount in cents
  status          String // paid, open, void, uncollectible
  invoiceUrl      String? // URL to the hosted invoice page
  pdfUrl          String? // URL to the invoice PDF
  invoiceDate     DateTime
  dueDate         DateTime?

  // 1-n: An invoice belongs to one subscription
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String

  // Frequently fetching invoices based on subscription id
  @@index([subscriptionId])
}

model UsageRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  teamId    String
  type      String // e.g., "transcription", "team_member", etc.
  quantity  Int      @default(1)
  metadata  Json? // Additional information

  // Frequently fetching usage records based on team id and type
  @@index([teamId, type])
}

model StripeCustomer {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  stripeCustomerId String   @unique

  // 1-1: A StripeCustomer belongs to one user
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  GUEST
  VIEWER
  MEMBER
  ADMIN
}
